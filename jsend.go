/*
Simple implementation of the JSend specification from https://labs.omniti.com/labs/jsend

A most trivial example
func myRequestHandler(w http.ResponseWriter, r *http.Request) {
	data := // My stuff
	jsend.Success(data).Send(w)
}

In more detail
Create a JSend success object
js := jsend.Success(data)

Send it to an http.ResponseWriter
err := js.Send(w)

Or send it formatted for human readability
err := js.SendFormatted(w)

Note that the Send methods will automatically fill out the HTTP response and set the
content type to application/json
Or if there is an error in constructing the message, send an HTTP 500 response for you.


If you need more control, or just want to write to a file,
there are the Write methods which take an io.Writer
js.Write(w)
js.WriteFormatted(w)


These are all the avilable response type constructors for the JSend reply types
jsend.Success(data)
jsend.Fail(data)
jsend.Error("Error Message")
jsend.ErrorCode("Error Message", 1234)
jsend.ErrorData("Error Message", errorData)
jsend.ErrorCodeWithData("Error Message", 1234, errorData)


You can also read a message from an io.Reader
jsend, err := jsend.Read(r)

or Receive a message from an http.Response
jsend, err := jsend.Receive(response)
*/

package jsend

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
)

////////////////////////////////////////////////////////////////////////////////
// Status constants
////////////////////////////////////////////////////////////////////////////////

const (
	StatusSuccess = "success"
	StatusFail    = "fail"
	StatusError   = "error"
)

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// The JSend object
////////////////////////////////////////////////////////////////////////////////

type JSend struct {
	Status  string      `json:"status"`
	Data    interface{} `json:"data,omitempty"`
	Message string      `json:"message,omitempty"`
	Code    int         `json:"code,omitempty"`
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// A JSend success object
////////////////////////////////////////////////////////////////////////////////

func Success(data interface{}) *JSend {
	return &JSend{Status: StatusSuccess, Data: data}
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// A JSend fail object
////////////////////////////////////////////////////////////////////////////////

func Fail(data interface{}) *JSend {
	return &JSend{Status: StatusFail, Data: data}
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// A JSend error object
////////////////////////////////////////////////////////////////////////////////

func Error(message string) *JSend {
	return &JSend{Status: StatusError, Message: message}
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// A JSend error object with error code
////////////////////////////////////////////////////////////////////////////////

func ErrorCode(message string, code int) *JSend {
	return &JSend{Status: StatusError, Message: message, Code: code}
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// A JSend error object with error data
////////////////////////////////////////////////////////////////////////////////

func ErrorData(message string, data interface{}) *JSend {
	return &JSend{Status: StatusError, Message: message, Data: data}
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// A JSend error object with error code and extra data
////////////////////////////////////////////////////////////////////////////////

func ErrorCodeWithData(message string, code int, data interface{}) *JSend {
	return &JSend{Status: StatusError, Message: message, Code: code, Data: data}
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Send the JSend object in compact form to an http.ResponseWriter
////////////////////////////////////////////////////////////////////////////////

func (jsend *JSend) Send(w http.ResponseWriter) error {
	j, err := json.Marshal(jsend)
	if err != nil {
		w.WriteHeader(500)
		io.WriteString(w, "Error: ")
		io.WriteString(w, err.Error())
		return err
	} else {
		w.Header().Set("Content-Type", "application/json")
		w.Write(j)
	}

	return nil
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Send the JSend object in human readable form to an http.ResponseWriter
////////////////////////////////////////////////////////////////////////////////

func (jsend *JSend) SendFormatted(w http.ResponseWriter) error {
	j, err := json.MarshalIndent(jsend, "", "  ")
	if err != nil {
		w.WriteHeader(500)
		io.WriteString(w, "Error: ")
		io.WriteString(w, err.Error())
		return err
	} else {
		w.Header().Set("Content-Type", "application/json")
		w.Write(j)
	}

	return nil
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Write the JSend object in compact form to an io.Writer
////////////////////////////////////////////////////////////////////////////////

func (jsend *JSend) Write(w io.Writer) error {
	j, err := json.Marshal(jsend)
	if err != nil {
		return err
	}
	_, err = w.Write(j)

	return err
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Write the JSend object in human readable form to an io.Writer
////////////////////////////////////////////////////////////////////////////////

func (jsend *JSend) WriteFormatted(w io.Writer) error {
	j, err := json.MarshalIndent(jsend, "", "  ")
	if err != nil {
		return err
	}
	_, err = w.Write(j)

	return err
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Read a JSend object from an io.Reader
////////////////////////////////////////////////////////////////////////////////

func Read(r io.Reader) (*JSend, error) {
	js := &JSend{}
	err := json.NewDecoder(r).Decode(js)
	return js, err
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Receive a JSend object from an http.Response
////////////////////////////////////////////////////////////////////////////////

func Receive(r *http.Response) (*JSend, error) {
	if r.StatusCode != 200 {
		return nil, fmt.Errorf("HTTP error reading JSend response %d", r.StatusCode)
	}
	ctype := r.Header.Get("Content-Type")
	if !strings.Contains(ctype, "text/plain") && !strings.Contains(ctype, "application/json") {
		return nil, fmt.Errorf("Unknown JSON Content-Type: %s", ctype)
	}

	return Read(r.Body)
}

////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Check whether the JSend structure is valid
////////////////////////////////////////////////////////////////////////////////

func (jsend *JSend) IsValid() bool {
	switch jsend.Status {
	case StatusSuccess:
		if jsend.Code != 0 {
			return false
		}
		if jsend.Message != "" {
			return false
		}
		return true
	case StatusFail:
		if jsend.Code != 0 {
			return false
		}
		if jsend.Message != "" {
			return false
		}
		return true
	case StatusError:
		return true
	}

	return false
}

////////////////////////////////////////////////////////////////////////////////
